data Calificacion = Excelente | Notable | Bueno | Suficiente | Insuficiente deriving (Show)
calif :: Int -> Calificacion
calif nota
    | nota >= 95 && nota <= 100 = Excelente
    | nota >= 85 && nota <= 94  = Notable
    | nota >= 75 && nota <= 84  = Bueno
    | nota >= 70 && nota <= 74  = Suficiente
    | otherwise                 = Insuficiente
resultado :: [Int] -> [Calificacion]
resultado = map calif
main :: IO ()
main = do
    let notas = [40, 77, 83, 95, 52, 60]
        calificaciones = resultado notas
    putStrLn "Notas originales:"
    print notas
    putStrLn "Calificaciones correspondientes:"
    print calificaciones
