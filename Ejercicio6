import Data.List (sort)
media :: [Double] -> Double
media xs = sum xs / fromIntegral (length xs)
desviacionEstandar :: [Double] -> Double
desviacionEstandar xs =
    let n = fromIntegral $ length xs
        m = media xs
        sumaCuadrados = sum [(x - m)^2 | x <- xs]
    in sqrt (sumaCuadrados / n)
puntuacionTipica :: Double -> [Double] -> Double
puntuacionTipica x muestra = (x - media muestra) / desviacionEstandar muestra
valoresAtipicos :: [Double] -> [Double]
valoresAtipicos muestra =
    let m = media muestra
        std = desviacionEstandar muestra
        puntuaciones = [puntuacionTipica x muestra | x <- muestra]
    in [x | (x, p) <- zip muestra puntuaciones, abs p > 3.0]
main :: IO ()
main = do
    let muestra = [25.0, 19.0, 15.0, 15.0, 27.0, 10.0, 640.0, 250.0]
        valoresAtipicosResultado = valoresAtipicos muestra
    putStrLn "Valores atípicos:"
    if null valoresAtipicosResultado
        then putStrLn "No se encontraron valores atípicos."
        else mapM_ print valoresAtipicosResultado


